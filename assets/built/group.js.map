{"version":3,"sources":["group.js"],"names":["parseFunction","functionAsString","match","exec","replace","Function","split","noop","module","exports","list","options","inverse","fn","groupingPredicate","hash","by","keys","groups","length","this","forEach","item","groupingKey","indexOf","push","key","items","reduce","buffer"],"mappings":"AAIA,SAASA,cAAcC,GACnB,IACIC,EADU,0CACMC,KAAKF,EAAiBG,QAAQ,MAAO,MACzD,OAAGF,EACQ,IAAIG,SAASH,EAAM,GAAGI,MAAM,KAAMJ,EAAM,IAE5C,KAGX,SAASK,OACR,MAAO,GAIRC,OAAOC,QAAU,SAAeC,EAAMC,GAClC,IACIC,GADAD,EAAUA,GAAW,IACHC,SAAWL,KAC7BM,EAAKF,EAAQE,IAAMN,KACnBO,EAAoBd,cAAcW,EAAQI,KAAKC,IAC/CC,EAAO,GACPC,EAAS,GAEb,IAAKJ,IAAsBJ,IAASA,EAAKS,OACrC,OAAOP,EAAQQ,MAwBnB,OADAV,EAAKW,QApBL,SAAoBC,GAChB,IAAIC,EAAcT,EAAkBQ,IACD,IAA/BL,EAAKO,QAAQD,IACTN,EAAKQ,KAAKF,GAGbL,EAAOK,KACJL,EAAOK,GAAe,CAClBG,IAAKH,EACLI,MAAO,KAIfT,EAAOK,GAAaI,MAAMF,KAAKH,KAQhCL,EAAKW,OALZ,SAAqBC,EAAQH,GAC/B,OAAOG,EAAShB,EAAGK,EAAOQ,KAIQ","file":"group.js","sourcesContent":["// This entire code is taken from https://github.com/conwid/GhostHelpers, with the purpose of creating a custom archive page.\n\n\nhttps://stackoverflow.com/questions/7650071/is-there-a-way-to-create-a-function-from-a-string-with-javascript\nfunction parseFunction(functionAsString) {\n    var funcReg = /function *\\(([^()]*)\\)[ \\n\\t]*{(.*)}/gmi;\n    var match = funcReg.exec(functionAsString.replace(/\\n/g, ' '));\n    if(match) {\n        return new Function(match[1].split(','), match[2]);\n    }\n    return null;\n};\n\nfunction noop() {\n\treturn '';\n}\n\nhttps://github.com/shannonmoeller/handlebars-group-by\nmodule.exports = function group(list, options) {\n    var options = options || {};\n    var inverse = options.inverse || noop;\n    var fn = options.fn || noop;\n    var groupingPredicate = parseFunction(options.hash.by);\n    var keys = [];\n    var groups = {};\n\n    if (!groupingPredicate || !list || !list.length) {\n        return inverse(this);\n    }\n\n    function addToGroup(item) {\n        var groupingKey = groupingPredicate(item);\n        if (keys.indexOf(groupingKey) === -1) {\n                keys.push(groupingKey);\n            }\n\n        if (!groups[groupingKey]) {\n                groups[groupingKey] = {\n                    key: groupingKey,\n                    items: []\n                };\n            }\n\n            groups[groupingKey].items.push(item);\n\t}\n\n    function renderGroup(buffer, key) {\n\t\treturn buffer + fn(groups[key]);\n    }\n\n    list.forEach(addToGroup);\n    return keys.reduce(renderGroup, '');\n};"]}